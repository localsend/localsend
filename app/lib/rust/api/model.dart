// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:localsend_app/rust/frb_generated.dart';

// These types are ignored because they are neither used by any `pub` functions nor (for structs and enums) marked `#[frb(unignore)]`: `PrepareUploadRequestDto`, `PrepareUploadResponseDto`, `ProtocolType`, `RegisterDto`, `RegisterResponseDto`

enum DeviceType {
  mobile,
  desktop,
  web,
  headless,
  server,
  ;
}

class FileDto {
  final String id;
  final String fileName;
  final BigInt size;
  final String fileType;
  final String? sha256;
  final String? preview;
  final FileMetadata? metadata;

  const FileDto({
    required this.id,
    required this.fileName,
    required this.size,
    required this.fileType,
    this.sha256,
    this.preview,
    this.metadata,
  });

  @override
  int get hashCode =>
      id.hashCode ^
      fileName.hashCode ^
      size.hashCode ^
      fileType.hashCode ^
      sha256.hashCode ^
      preview.hashCode ^
      metadata.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is FileDto &&
          runtimeType == other.runtimeType &&
          id == other.id &&
          fileName == other.fileName &&
          size == other.size &&
          fileType == other.fileType &&
          sha256 == other.sha256 &&
          preview == other.preview &&
          metadata == other.metadata;
}

class FileMetadata {
  final String? modified;
  final String? accessed;

  const FileMetadata({
    this.modified,
    this.accessed,
  });

  @override
  int get hashCode => modified.hashCode ^ accessed.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is FileMetadata &&
          runtimeType == other.runtimeType &&
          modified == other.modified &&
          accessed == other.accessed;
}
